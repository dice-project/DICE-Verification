<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
    <declaration>// Place global declarations here.

const int NUMBER_OF_CPU = {{ tot_cores }};
const int NUMBER_OF_STAGES = {{ stages | length }};

int[0,NUMBER_OF_CPU] available_cpu = {{ tot_cores }};

bool stage[NUMBER_OF_STAGES] = { {{ ('0' * stages | length ) | list | join(', ') }} };

clock time;</declaration>
 {% for k, s in stages.iteritems() -%}
    <template>
        <name x="5" y="5">Stage{{ stage_id_map[k] }}</name>
        <parameter>const int TASK_DURATION, const int STAGE_ID, const int NUMBER_OF_TASKS</parameter>
        <declaration>// Place local declarations here.

clock c;
int[0, NUMBER_OF_TASKS] ntasks=0;</declaration>
        <location id="init" x="-250" y="408">
            <name x="-250" y="416">Init</name>
        </location>
        <location id="completed" x="16" y="496">
            <name x="24" y="512">Completed</name>
        </location>

    {% for tc in range(1, tot_cores + 1) -%}
        <location id="cores{{ tc }}" x="{{ 80   * loop.index - 500}}" y="104">
            <name x="{{ 80 * loop.index - 500}}" y="80">_{{ tc }}_run_tc</name>
            <label kind="invariant" x="0" y="0">c&lt;=TASK_DURATION</label>
        </location>
    {% endfor %}
        <location id="batch_finished" x="16" y="408">
            <name x="24" y="416">Batch_finished</name>
        </location>
        <init ref="init"/>
        <transition>
            <source ref="init"/>
            <target ref="batch_finished"/>
            <label kind="guard" x="-246" y="400">
            {% for p in s.parentsIds -%}
            stage[{{ stage_id_map[p | string] }}]==1 &amp;&amp;
            {% endfor -%}
            1==1
            </label>
        </transition>
        {% for tc in range(1, tot_cores + 1) -%}
        <transition>
            <source ref="batch_finished"/>
            <target ref="cores{{ tc }}"/>
            <label kind="guard" x="{{ 40   * loop.index - 300}}" y="160">available_cpu&gt;{{ tc-1 }} &amp;&amp; ntasks &lt;=NUMBER_OF_TASKS-{{ tc }}</label>
            <label kind="assignment" x="{{ 40   * loop.index -300}}" y="184">c=0, available_cpu=available_cpu-{{ tc }}</label>
            <nail x="16" y="240"/>
        </transition>
        {% endfor %}
        {% for tc in range(1, tot_cores + 1) -%}
        <transition>
            <source ref="cores{{ tc }}"/>
            <target ref="batch_finished"/>
            <label kind="guard" x="512" y="424">c == TASK_DURATION</label>
            <label kind="assignment" x="512" y="440">ntasks = ntasks+{{ tc }}, available_cpu=available_cpu+{{ tc }}</label>
            <nail x="624" y="408"/>
        </transition>
        {% endfor %}
        <transition>
            <source ref="batch_finished"/>
            <target ref="completed"/>
            <label kind="guard" x="24" y="440">ntasks==NUMBER_OF_TASKS</label>
            <label kind="assignment" x="24" y="456">stage[STAGE_ID]=1</label>
        </transition>
    </template>
    {% endfor %}
    <system>// Place template instantiations here.
{% for k, s in stages.iteritems() -%}
stage{{ stage_id_map[k] }} = Stage{{ stage_id_map[k] }}({{ s.t_task_verification | int }}, {{ stage_id_map[k] }}, {{ s.numtask }});
{% endfor %}

// cost0 = CumulativeCost();

// List one or more processes to be composed into a system.
system stage{{ stages.values() | join(', stage', attribute='ordinal_id') }};</system>
</nta>
